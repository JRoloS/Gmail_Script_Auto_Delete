function BorraElViejoEmilio() {
  try {
    // Divide los dominios en categorías (esto no es necesario, es para ordenarlos fácilmente cuando las listas crezcan)
    // Divide the domains into categories (this is not necessary; it's just to organize them easily as the lists grow)
    
    const games = ['immail.fanatical.com', 'mailer.humblebundle.com','store.greenmangaming.com','lurkit.com'];
    const finance = ['emails.paypal.com','insights.natwest.com','revolut.com'];
    const jobs = ['linkedin.com', 'ziprecruiter.co.uk','notify.infojobs.net'];
    const spam = ['notice.aliexpress.com', 'updates.papajohns.co.uk','slatergordon.co.uk','mosalingua.com'];
    const social = ['quora.com', 'twitch.tv', 'facebookmail.com', 'redditmail.com','discover.pinterest.com'];
    const stores = ['jsaux.com','hyperxnews.eu','melgeek.com','mailers.europe.creative.com'];

    // Combina las categorías en una sola lista de dominios
    // Combine the categories into a single list of domains
    
    const domains = jobs.concat(spam, games, social, finance, stores);

    // Calcula la fecha límite (hace 15 días)
    // Calculate the cutoff date (15 days ago)
    
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 15);
    
    // Formatear la fecha límite como YYYY/MM/DD
    // Format the cutoff date as YYYY/MM/DD 
    
    const formattedDate = formatDate(cutoffDate);

    // Contador para el número de correos eliminados
    // A counter for the number of deleted emails
    
    let deletedCount = 0;

    // Eliminar correos electrónicos anteriores a 15 días de cada dominio y sólo no leídos
    // Delete emails older than 15 days from each domain and only unread ones
    
    domains.forEach(domain => {
      try {
        const query = `before:${formattedDate} from:*@${domain} is:unread`; // Sólo correos no leídos , Only unread ones
        deletedCount += BorraEmiliosporQuery(query);
      } catch (error) {
        console.error(`Error processing domain ${domain}:`, error);
      }
    });

    // Mostrar en consola el número total de correos eliminados (si hay alguno)
    // Show on console the total number of deleted emails (if any)
    
    if (deletedCount > 0) {
      console.log(`Total de correos eliminados: ${deletedCount}`);
    }
  } catch (error) {
    console.error('Error executing BorraElViejoEmilio:', error);
  }
}

/**
 * Formatea una fecha como YYYY/MM/DD.
 * @param {Date} date - La fecha a formatear.
 * @returns {string} - La cadena de fecha formateada.
 */

/**
 * Formats a date as YYYY/MM/DD.
 * @param {Date} date - The date to format.
 * @returns {string} - The formatted date string.
 */

function formatDate(date) {
  try {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Asegura mes de dos dígitos, Ensures the month is two digits long
    const day = String(date.getDate()).padStart(2, '0'); // Asegura día de dos dígitos, Ensures day is two digits long
    return `${year}/${month}/${day}`;
  } catch (error) {
    console.error('Error formatting date:', error);
    return '1970/01/01'; // Fallback date
  }
}

/**
 * Elimina correos electrónicos basados en la consulta (Query).
 * @param {string} query - La consulta de búsqueda para encontrar correos electrónicos.
 * @returns {number} - La cantidad de correos eliminados.
 */

/**
 * Deletes emails based on the query.
 * @param {string} query - The search query to find emails.
 * @returns {number} - The number of emails deleted.
 */

function BorraEmiliosporQuery(query) {
  try {
    const threads = GmailApp.search(query);
    
    // Si no hay correos para eliminar, retorna 0 y evita errores
    // If there are no emails to delete, return 0 and prevent errors
    
    if (threads.length === 0) {
      return 0;
    }

    // Mover correos electrónicos a la papelera (borrar)
    // Move emails to trash bin (delete)
    
    threads.forEach(thread => {
      try {
        thread.moveToTrash();
      } catch (error) {
        console.error('Error moving thread to trash:', error);
      }
    });

    // Retorna el número de correos eliminados
    // Returns the number of deleted emails
    
    return threads.length;
  } catch (error) {
    console.error('Error searching emails:', error);
    return 0;
  }
}
